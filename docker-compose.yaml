version: "3.8"

services:
  # Сервис App - FastAPI приложение с REST API эндпоинтами
  app:
    build:
      context: ./services/app
      dockerfile: Dockerfile
    image: ml-service-app:1.0
    container_name: ml-service-app
    restart: unless-stopped
    env_file:
      - ./services/app/.env
    ports:
      - "8000:8000"
    networks:
      - ml-service-network
    volumes:
      - ./ml_service:/app/ml_service
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 40s

  # Веб-интерфейс
  web:
    build:
      context: ./services/web
      dockerfile: Dockerfile
    image: ml-service-web:1.0
    container_name: ml-service-web
    restart: unless-stopped
    networks:
      - ml-service-network
    depends_on:
      - app

  # Сервис Telegram Bot в отдельном контейнере
  bot:
    build:
      context: ./services/bot
      dockerfile: Dockerfile
    image: ml-service-bot:1.0
    container_name: ml-service-bot
    restart: unless-stopped
    env_file:
      - ./services/bot/.env
    networks:
      - ml-service-network
    ports:
      - "3000:3000"
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
      - 1.0.0.1
    extra_hosts:
      - "api.telegram.org:149.154.167.99"
      - "api.telegram.org:149.154.167.220"
    depends_on:
      - database
      - rabbitmq
    environment:
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - NO_PROXY=localhost,127.0.0.1

  # Сервис ML Worker (один воркер вместо масштабируемого)
  ml-worker:
    build:
      context: ./services/ml_worker
      dockerfile: Dockerfile
    image: ml-service-worker:1.0
    container_name: ml-service-worker
    restart: unless-stopped
    env_file:
      - ./services/ml_worker/.env
    volumes:
      - ./ml_service:/app/ml_service
      - ./models:/models
    networks:
      - ml-service-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      database:
        condition: service_healthy
    environment:
      - WORKER_ID=ml-worker-1

  # Сервис RabbitMQ для обмена сообщениями между сервисами
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: ml-service-rabbitmq
    restart: on-failure
    ports:
      - "15672:15672"  # Порт для веб-интерфейса
      - "5672:5672"    # Порт для AMQP
    volumes:
      - rabbitmq_volume:/var/lib/rabbitmq
    networks:
      - ml-service-network
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Сервис PostgreSQL
  database:
    image: postgres:14.10
    container_name: ml-service-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=ml_service
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    networks:
      - ml-service-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Прокси-сервер Nginx
  nginx:
    image: nginx:1.25.3
    container_name: ml-service-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    depends_on:
      app:
        condition: service_healthy
      web:
        condition: service_started
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - ml-service-network

networks:
  ml-service-network:
    name: ml-service-network
    driver: bridge

volumes:
  postgres_volume:
  rabbitmq_volume: 