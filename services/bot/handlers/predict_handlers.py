"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —ç–º–æ—Ü–∏–π –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
"""
import logging
import base64
import io
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from services import (
    create_prediction,
    get_prediction_status,
    get_user_predictions
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class PredictionStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è."""
    waiting_for_photo = State() # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ


async def cmd_predict(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /predict.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π.
    """
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cancel_keyboard.add(types.KeyboardButton('/cancel'))
    
    await message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ª–∏—Ü–∞ —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —ç–º–æ—Ü–∏–π. "
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.\n\n"
        "–î–ª—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å —á–µ—Ç–∫–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ª–∏—Ü–∞.",
        reply_markup=cancel_keyboard
    )
    await PredictionStates.waiting_for_photo.set()


async def cancel_prediction(message: types.Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.
    """
    from .common_handlers import get_main_keyboard
    
    await state.finish()
    await message.reply(
        "–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /predict.",
        reply_markup=get_main_keyboard()
    )


async def process_photo(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —ç–º–æ—Ü–∏–π.
    """
    from .common_handlers import get_main_keyboard
    import asyncio
    from datetime import datetime, timedelta
    
    if not message.photo:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return
    
    telegram_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ (–≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä)
    photo = message.photo[-1]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ
    status_message = await message.reply("üîÑ –ü–æ–ª—É—á–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∞–Ω–∞–ª–∏–∑...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await status_message.edit_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
        photo_file = await photo.get_file()
        photo_bytes = await message.bot.download_file(photo_file.file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        await status_message.edit_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        photo_base64 = base64.b64encode(photo_bytes.getvalue()).decode('utf-8')
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        await status_message.edit_text("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        prediction_id = await create_prediction(telegram_id, photo_base64)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(prediction_id=prediction_id)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.finish()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
        await status_message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        processing_message = await message.reply("‚è≥ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π...")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
        max_retries = 6  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        for retry in range(max_retries):
            await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                prediction = await get_prediction_status(prediction_id)
                
                if prediction["status"] == "completed":
                    # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await processing_message.delete()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏—é –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    emotion = None
                    confidence = None
                    
                    if prediction["result"] and "translated_emotion" in prediction["result"]:
                        emotion = prediction["result"]["translated_emotion"]
                    elif prediction["result"] and "dominant_emotion" in prediction["result"]:
                        emotion = prediction["result"]["dominant_emotion"]
                    
                    if prediction["result"] and "confidence" in prediction["result"]:
                        confidence = prediction["result"]["confidence"]
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —ç–º–æ—Ü–∏–∏
                    if emotion:
                        result_message = f"üòÄ –ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —ç–º–æ—Ü–∏—è: {emotion}"
                        if confidence:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1
                            if confidence > 1:
                                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                                result_message += f"\nüéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%"
                            else:
                                # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                                result_message += f"\nüéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence * 100:.1f}%"
                    else:
                        # –ï—Å–ª–∏ —ç–º–æ—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
                        result_message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏—é –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
                    
                    await message.reply(result_message, reply_markup=get_main_keyboard())
                    break
                    
                elif retry == max_retries - 1:
                    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—ë –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤
                    await processing_message.delete()
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    keyboard.add(types.KeyboardButton(f"/status {prediction_id}"))
                    keyboard.add(types.KeyboardButton("/predict"), types.KeyboardButton("/history"))
                    keyboard.add(types.KeyboardButton("/balance"), types.KeyboardButton("/help"))
                    
                    await message.reply(
                        f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å.\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∑–∂–µ.",
                        reply_markup=keyboard
                    )
                    break
            except Exception as check_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {check_error}")
                if retry == max_retries - 1:
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ
                    await processing_message.delete()
                    await message.reply(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=get_main_keyboard()
                    )
        
    except ValueError as e:
        if status_message:
            await status_message.delete()
        await message.reply(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —Å –¥—Ä—É–≥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.", 
            reply_markup=get_main_keyboard()
        )
        await state.finish()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        if status_message:
            await status_message.delete()
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
            reply_markup=get_main_keyboard()
        )
        await state.finish()


async def cmd_prediction_status(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status.
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
    """
    user_id = message.from_user.id
    prediction_id = get_prediction_id_from_message(message)

    if not prediction_id:
        await message.reply(
            "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /status <prediction_id>"
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞
    status_message = await message.reply("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
        prediction = await get_prediction_status(prediction_id)

        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if not prediction:
            await status_message.delete()
            await message.reply("‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        status = prediction.get("status", "pending")

        if status == "pending":
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await status_message.delete()
            await message.reply("‚è≥ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        elif status == "completed":
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            result = prediction.get("result", {})
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º–æ—Ü–∏–∏
            emotion = None
            confidence = None
            
            if result and "translated_emotion" in result:
                emotion = result["translated_emotion"]
            elif result and "dominant_emotion" in result:
                emotion = result["dominant_emotion"]
            
            if result and "confidence" in result:
                confidence = result["confidence"]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            response_text = f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω\n\n"
            
            if emotion:
                response_text += f"üòä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —ç–º–æ—Ü–∏—è: {emotion}\n"
                
                if confidence is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1
                    if confidence > 1:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        response_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%\n"
                    else:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                        response_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence * 100:.1f}%\n"
            else:
                response_text += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏—é –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
            
            await status_message.delete()
            await message.reply(response_text)
        else:
            # –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            await status_message.delete()
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
        await status_message.delete()
        await message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def cmd_prediction_history(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /history.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    from .common_handlers import get_main_keyboard
    from datetime import datetime, timedelta
    
    telegram_id = message.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    status_message = await message.reply("üîÑ –ü–æ–ª—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ–¥–∞–≤–∞—è Telegram ID
        predictions = await get_user_predictions(telegram_id)
        
        if not predictions:
            await status_message.edit_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —ç–º–æ—Ü–∏–π.")
            await message.reply(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /predict, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        message_text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã —ç–º–æ—Ü–∏–π:\n\n"
        
        for i, prediction in enumerate(predictions, 1):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
            if prediction["status"] == "pending":
                status_text = "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                status_emoji = "‚è≥"
            elif prediction["status"] == "completed":
                status_text = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ"
                status_emoji = "‚úÖ"
            elif prediction["status"] == "failed":
                status_text = "‚ùå –û—à–∏–±–∫–∞"
                status_emoji = "‚ùå"
            else:
                status_text = f"–°—Ç–∞—Ç—É—Å: {prediction['status']}"
                status_emoji = "‚ÑπÔ∏è"
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (UTC+3)
            moscow_time = None
            if prediction["created_at"]:
                if isinstance(prediction["created_at"], str):
                    utc_time = datetime.fromisoformat(prediction["created_at"].replace('Z', '+00:00'))
                else:
                    utc_time = prediction["created_at"]
                moscow_time = utc_time + timedelta(hours=3)
                moscow_time_str = moscow_time.strftime('%d.%m.%Y %H:%M (–ú–°–ö)')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
            message_text += f"{i}. {status_emoji} –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç {moscow_time_str}\n"
            message_text += f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
            
            # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if prediction["status"] == "completed" and prediction["result"] and "prediction" in prediction["result"]:
                result_preview = prediction["result"]["prediction"]
                if len(result_preview) > 50:
                    result_preview = result_preview[:50] + "..."
                message_text += f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_preview}\n"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–º–æ—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ
                if "translated_emotion" in prediction["result"]:
                    message_text += f"   –≠–º–æ—Ü–∏—è: {prediction['result']['translated_emotion']}\n"
            
            message_text += "\n"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        await status_message.edit_text(message_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        await message.reply(
            "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /predict.",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {e}")
        await status_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.")
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /predict.",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫-–∫–Ω–æ–ø–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
async def process_prediction_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏.
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏.
    """
    user_id = callback_query.from_user.id
    callback_data = callback_query.data
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
    prediction_id = callback_data.split(':')[1] if ':' in callback_data else None
    
    if callback_data == "refresh_history":
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        message = callback_query.message
        await callback_query.answer("–û–±–Ω–æ–≤–ª—è—é –∏—Å—Ç–æ—Ä–∏—é...")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        await message.delete()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        fake_message = types.Message(
            chat=message.chat,
            from_user=callback_query.from_user,
            date=datetime.now(),
            text="/history",
            message_id=0
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history
        from .balance_handlers import cmd_prediction_history
        await cmd_prediction_history(fake_message)
        return
    
    if not prediction_id:
        await callback_query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        return
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
    await callback_query.answer("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
        prediction = await get_prediction_status(prediction_id)
        
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if not prediction:
            await callback_query.message.reply("‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (UTC+3)
        created_at_moscow = None
        if prediction.get("created_at"):
            if isinstance(prediction["created_at"], str):
                created_utc = datetime.fromisoformat(prediction["created_at"].replace('Z', '+00:00'))
            else:
                created_utc = prediction["created_at"]
            created_at_moscow = created_utc + timedelta(hours=3)
            created_at_str = created_at_moscow.strftime('%d.%m.%Y %H:%M ')
        else:
            created_at_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        status = prediction.get("status", "pending")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        detail_text = f"üìù –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏\n\n"
        detail_text += f"üÜî ID: {prediction_id}\n"
        detail_text += f"üïí –°–æ–∑–¥–∞–Ω–æ: {created_at_str}\n"
        detail_text += f"üìä –°—Ç–∞—Ç—É—Å: "
        
        if status == "pending":
            detail_text += "‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ\n"
            detail_text += "\n–ê–Ω–∞–ª–∏–∑ –≤—Å–µ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif status == "completed":
            detail_text += "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            result = prediction.get("result", {})
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–º–æ—Ü–∏–∏
            emotion = None
            if "translated_emotion" in result:
                emotion = result["translated_emotion"]
            elif "dominant_emotion" in result:
                emotion = result["dominant_emotion"]
            
            if emotion:
                detail_text += f"üòä –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —ç–º–æ—Ü–∏—è: {emotion}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence = None
            if "confidence" in result:
                confidence = result["confidence"]
                if confidence is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1
                    if confidence > 1:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                        detail_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1f}%\n\n"
                    else:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1, —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                        detail_text += f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence * 100:.1f}%\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if "emotion_scores" in result:
                detail_text += "üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π:\n"
                for emotion_name, score in sorted(result["emotion_scores"].items(), key=lambda x: x[1], reverse=True):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ü–µ–Ω–∫–∏
                    if score > 1:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        detail_text += f"   - {emotion_name}: {score:.1f}%\n"
                    else:
                        # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0 –¥–æ 1
                        detail_text += f"   - {emotion_name}: {score * 100:.1f}%\n"
        else:
            detail_text += "‚ùå –û—à–∏–±–∫–∞\n"
            detail_text += "\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            text="¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏", 
            callback_data="refresh_history"
        ))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        await callback_query.message.reply(
            detail_text,
            reply_markup=keyboard
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {e}")
        await callback_query.message.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        ) 